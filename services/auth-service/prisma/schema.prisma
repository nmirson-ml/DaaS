// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enable UUID extension
generator extensions {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String?  @map("first_name") @db.VarChar(100)
  lastName     String?  @map("last_name") @db.VarChar(100)
  isActive     Boolean  @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  tenants       UserTenant[]
  refreshTokens RefreshToken[]

  @@map("users")
  @@index([email])
  @@index([isActive])
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  subdomain String   @unique @db.VarChar(100)
  plan      TenantPlan @default(FREE)
  settings  Json     @default("{}") @db.JsonB
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  users UserTenant[]

  @@map("tenants")
  @@index([subdomain])
  @@index([isActive])
}

model UserTenant {
  userId      String   @map("user_id")
  tenantId    String   @map("tenant_id")
  role        UserRole @default(VIEWER)
  permissions Json     @default("[]") @db.JsonB
  isActive    Boolean  @default(true) @map("is_active")
  invitedBy   String?  @map("invited_by")
  invitedAt   DateTime? @map("invited_at") @db.Timestamptz
  joinedAt    DateTime? @map("joined_at") @db.Timestamptz
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@map("user_tenants")
  @@index([userId])
  @@index([tenantId])
  @@index([role])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.VarChar(255)
  userId    String   @map("user_id")
  tenantId  String   @map("tenant_id")
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  revoked   Boolean  @default(false)
  userAgent String?  @map("user_agent") @db.Text
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([revoked])
}

// Audit log for security events
model SecurityEvent {
  id          String      @id @default(cuid())
  userId      String?     @map("user_id")
  tenantId    String?     @map("tenant_id")
  eventType   EventType   @map("event_type")
  description String      @db.Text
  ipAddress   String?     @map("ip_address") @db.VarChar(45)
  userAgent   String?     @map("user_agent") @db.Text
  metadata    Json        @default("{}") @db.JsonB
  severity    EventSeverity @default(INFO)
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz

  @@map("security_events")
  @@index([userId])
  @@index([tenantId])
  @@index([eventType])
  @@index([severity])
  @@index([createdAt])
}

// Rate limiting table
model RateLimit {
  id         String   @id @default(cuid())
  identifier String   @db.VarChar(255) // IP or user ID
  endpoint   String   @db.VarChar(255)
  requests   Int      @default(1)
  windowStart DateTime @map("window_start") @db.Timestamptz
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([identifier, endpoint, windowStart])
  @@map("rate_limits")
  @@index([identifier, endpoint])
  @@index([windowStart])
}

// Enums
enum UserRole {
  ADMIN
  EDITOR
  VIEWER

  @@map("user_role")
}

enum TenantPlan {
  FREE
  PRO
  ENTERPRISE

  @@map("tenant_plan")
}

enum EventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGE
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_SUCCESS
  TOKEN_REFRESH
  TOKEN_REVOKED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  PERMISSION_DENIED
  SUSPICIOUS_ACTIVITY

  @@map("event_type")
}

enum EventSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL

  @@map("event_severity")
}